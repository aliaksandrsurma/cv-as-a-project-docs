"use strict";(self.webpackChunkcv_as_a_project_documentation=self.webpackChunkcv_as_a_project_documentation||[]).push([[2719],{6902:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=s(5893),r=s(1151);const i={sidebar_position:2,title:"REST vs GraphQL",tags:["API","REST","GraphQL"]},a="REST vs GraphQL",o={id:"personal-kb/cheat-sheets/tech/rest-vs-graphql",title:"REST vs GraphQL",description:"REST vs GraphQL",source:"@site/docs/personal-kb/cheat-sheets/tech/rest-vs-graphql.md",sourceDirName:"personal-kb/cheat-sheets/tech",slug:"/personal-kb/cheat-sheets/tech/rest-vs-graphql",permalink:"/docs/personal-kb/cheat-sheets/tech/rest-vs-graphql",draft:!1,unlisted:!1,editUrl:"https://github.com/aliaksandrsurma/cv-as-a-project-docs/edit/main/docs/personal-kb/cheat-sheets/tech/rest-vs-graphql.md",tags:[{label:"API",permalink:"/docs/tags/api"},{label:"REST",permalink:"/docs/tags/rest"},{label:"GraphQL",permalink:"/docs/tags/graph-ql"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"REST vs GraphQL",tags:["API","REST","GraphQL"]},sidebar:"personalSidebar",previous:{title:"git-basic-diagram",permalink:"/docs/personal-kb/cheat-sheets/tech/git/git-basic-diagram"},next:{title:"key-http-methods",permalink:"/docs/personal-kb/cheat-sheets/tech/key-http-methods"}},c={},l=[];function d(e){const t={h1:"h1",img:"img",li:"li",p:"p",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"rest-vs-graphql",children:"REST vs GraphQL"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"REST vs GraphQL",src:s(8139).Z+"",width:"774",height:"925"})}),"\n",(0,n.jsx)(t.p,{children:"REST"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Uses standard HTTP methods like GET, POST, PUT, DELETE for CRUD operations."}),"\n",(0,n.jsx)(t.li,{children:"Works well when you need simple, uniform interfaces between separate services/applications."}),"\n",(0,n.jsx)(t.li,{children:"Caching strategies are straightforward to implement."}),"\n",(0,n.jsx)(t.li,{children:"The downside is it may require multiple roundtrips to assemble related data from separate endpoints."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"GraphQL"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Provides a single endpoint for clients to query for precisely the data they need."}),"\n",(0,n.jsx)(t.li,{children:"Clients specify the exact fields required in nested queries, and the server returns optimized payloads containing just those fields."}),"\n",(0,n.jsx)(t.li,{children:"Supports Mutations for modifying data and Subscriptions for real-time notifications."}),"\n",(0,n.jsx)(t.li,{children:"Great for aggregating data from multiple sources and works well with rapidly evolving frontend requirements."}),"\n",(0,n.jsx)(t.li,{children:"However, it shifts complexity to the client side and can allow abusive queries if not properly safeguarded"}),"\n",(0,n.jsx)(t.li,{children:"Caching strategies can be more complicated than REST."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"The best choice between REST and GraphQL depends on the specific requirements of the application and development team. GraphQL is a good fit for complex or frequently changing frontend needs, while REST suits applications where simple and consistent contracts are preferred."})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8139:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/rest-vs-graphql-e5e603e617ce7c402ad07a3c97ec5273.png"},1151:(e,t,s)=>{s.d(t,{Z:()=>o,a:()=>a});var n=s(7294);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);