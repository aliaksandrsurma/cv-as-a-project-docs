"use strict";(self.webpackChunkcv_as_a_project_documentation=self.webpackChunkcv_as_a_project_documentation||[]).push([[3901],{3695:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var i=t(5893),n=t(1151);const a={sidebar_position:5,title:"SOLID",tags:["SOLID"]},r="SOLID",o={id:"personal-kb/cheat-sheets/architecture-practice/system-design/solid",title:"SOLID",description:"SOLID",source:"@site/docs/personal-kb/cheat-sheets/architecture-practice/system-design/solid.md",sourceDirName:"personal-kb/cheat-sheets/architecture-practice/system-design",slug:"/personal-kb/cheat-sheets/architecture-practice/system-design/solid",permalink:"/docs/personal-kb/cheat-sheets/architecture-practice/system-design/solid",draft:!1,unlisted:!1,editUrl:"https://github.com/aliaksandrsurma/cv-as-a-project-docs/edit/main/docs/personal-kb/cheat-sheets/architecture-practice/system-design/solid.md",tags:[{label:"SOLID",permalink:"/docs/tags/solid"}],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"SOLID",tags:["SOLID"]},sidebar:"personalSidebar",previous:{title:"Top Caching Strategies",permalink:"/docs/personal-kb/cheat-sheets/architecture-practice/system-design/top-caching-strategies"},next:{title:"System Design Plan Example",permalink:"/docs/personal-kb/cheat-sheets/architecture-practice/system-design/system-design-plan-example"}},c={},l=[{value:"Single Responsibility Principle (SRP)",id:"single-responsibility-principle-srp",level:2},{value:"TBD",id:"tbd",level:2}];function d(e){const s={h1:"h1",h2:"h2",img:"img",p:"p",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"solid",children:"SOLID"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"SOLID",src:t(2418).Z+"",width:"728",height:"562"})}),"\n",(0,i.jsx)(s.p,{children:"Maintainability: Following sound design principles makes code more maintainable. When code is well-structured and adheres to these principles, it becomes easier to identify and fix issues, add new features, and make improvements without causing unintended consequences."}),"\n",(0,i.jsx)(s.p,{children:"Scalability: Well-designed software is scalable. It can accommodate changes and growth in requirements without requiring extensive rework or becoming increasingly complex."}),"\n",(0,i.jsx)(s.p,{children:"Code Reusability: Adhering to design principles often leads to code that is more reusable. Reusable components save time and effort in development and testing."}),"\n",(0,i.jsx)(s.p,{children:"Collaboration: Design principles provide a common framework for developers to work within. This common understanding promotes collaboration and reduces misunderstandings among team members."}),"\n",(0,i.jsx)(s.p,{children:"Reduced Bugs and Pitfalls: Following design principles helps to identify and mitigate common programming pitfalls and design flaws. This results in fewer bugs and more robust software."}),"\n",(0,i.jsx)(s.p,{children:"Future-Proofing: Well-designed software can adapt to changing requirements and technologies. It's an investment in the long-term viability of the software product."}),"\n",(0,i.jsx)(s.h2,{id:"single-responsibility-principle-srp",children:"Single Responsibility Principle (SRP)"}),"\n",(0,i.jsx)(s.p,{children:"The \u201cS\u201d in the SOLID principles stands for the Single Responsibility Principle (SRP), which states that a class should have only one reason to change or, in other words, it should have a single, well-defined responsibility or job within a software system."}),"\n",(0,i.jsx)(s.h2,{id:"tbd",children:"TBD"})]})}function p(e={}){const{wrapper:s}={...(0,n.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},2418:(e,s,t)=>{t.d(s,{Z:()=>i});const i=t.p+"assets/images/solid-d67512090051a4dbd222dc1c1809f443.png"},1151:(e,s,t)=>{t.d(s,{Z:()=>o,a:()=>r});var i=t(7294);const n={},a=i.createContext(n);function r(e){const s=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(a.Provider,{value:s},e.children)}}}]);