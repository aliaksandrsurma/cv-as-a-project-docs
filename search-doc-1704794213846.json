{"searchDocs":[{"title":"","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/architecture-practice/software-architecture-styles","content":"","keywords":"","version":"Next"},{"title":"Solution Document","type":0,"sectionRef":"#","url":"/docs/cv-as-a-project/solution-document","content":"","keywords":"","version":"Next"},{"title":"Stakeholders​","type":1,"pageTitle":"Solution Document","url":"/docs/cv-as-a-project/solution-document#stakeholders","content":"   Name\tRole\tNotesAlex Surma\tPO\tRepresenting a &quot;business part&quot; and requirements Alex Surma\tSolution Architect\tDrives a solutioning and technical design Alex Surma\tFE and BE Dev Lead\tI'm doing dev too ;) Alex Surma\tQA Lead\tAgain me ;) Alex Surma\tSRE/DevOps\tHave to play this role too N/A\tHRs\tUsers of my public personal 'CV' site N/A\tArchitects/Directors/Tech leads\tPeople who might interview me, reviewers of current documentation, back-end components, API, source code  ","version":"Next","tagName":"h2"},{"title":"Definitions, Acronyms, Abbreviations​","type":1,"pageTitle":"Solution Document","url":"/docs/cv-as-a-project/solution-document#definitions-acronyms-abbreviations","content":"   Term\tDescription\tReferenceCV\tCurriculum Vitae. A CV is a comprehensive document that outlines a person's education, work experience, skills, achievements, and other relevant information. C4 model\tOne of approaches for diagramming and documenting software architectures\thttps://c4model.com/  ","version":"Next","tagName":"h2"},{"title":"Overview​","type":1,"pageTitle":"Solution Document","url":"/docs/cv-as-a-project/solution-document#overview","content":"   ","version":"Next","tagName":"h2"},{"title":"Context​","type":1,"pageTitle":"Solution Document","url":"/docs/cv-as-a-project/solution-document#context","content":" note This section provides the context for Design / Solution Architect work.  Problem statement:  me as an interviewer always find hard to check 'architect' skills and experience without looking into real deliverables and artifacts. What I usually get is a PDF file and have to prepare questions that should somehow confirm past experienceme as an interviewee want to better and more efficiently present myself as a professional engineer/architect. Working on large enterprice projects with lot of legacy solutions makes it hard to share outcomes of my work. Want to have something more then plain, boring text in PDF (that can be easily AI generated nowadays). Set of artifacts I can elaborate on, use as a starting points or references during potential white-boarding sessions with my interviewers    info C4 Model has been used for creating an above diagram. However in real live it doesn't always have to be formal and may depend on the audience/stakeholders Example - TBD  CV UI and project documentation should have a public access, so it's easy to share and present on interview demonstrate design, documentation, tech skills as a set of artifacts rather than text in MS word file/PDF  ","version":"Next","tagName":"h3"},{"title":"Business goals​","type":1,"pageTitle":"Solution Document","url":"/docs/cv-as-a-project/solution-document#business-goals","content":" If I were to define something measurable here I would do this as a 'interview to offer' KPI e.g. increase 'interview to offer' rate from 10% to 30%  ","version":"Next","tagName":"h3"},{"title":"Quality attributes​","type":1,"pageTitle":"Solution Document","url":"/docs/cv-as-a-project/solution-document#quality-attributes","content":" Consider to add in this section the following information: Introduction, context Quality Goals Issues and opportunities SWOT analysis  Link to Confluence page for Business requirement.  ","version":"Next","tagName":"h3"},{"title":"Dependencies & assumptions​","type":1,"pageTitle":"Solution Document","url":"/docs/cv-as-a-project/solution-document#dependencies--assumptions","content":" Description with assumptions, constraints and dependencies with others  Solution Design  High level diagram representation for solution.  If replatforming or significant changes should include both 'as is' and 'to be' sections  Baseline Design/Architecture Target Design/Architecture  Should include all necessary views e.g  Logical View Components Data View Infrastructure / Deployment View [Any other views to be placed here]  May also include ''addressing quality attributes' if applicable e.g  Addressing Key Quality Attributes  Availability .... Usability  ","version":"Next","tagName":"h2"},{"title":"API Specification​","type":1,"pageTitle":"Solution Document","url":"/docs/cv-as-a-project/solution-document#api-specification","content":" Link to SwaggerHub to the API specification.  ","version":"Next","tagName":"h2"},{"title":"Database schema​","type":1,"pageTitle":"Solution Document","url":"/docs/cv-as-a-project/solution-document#database-schema","content":" Entities represtantion for data model based on PlantUML format.  Architecture decision records  Issue\tImpact\tStatus   Change Log  References  Appendix  ","version":"Next","tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"Solution Document","url":"/docs/cv-as-a-project/solution-document#examples","content":"","version":"Next","tagName":"h2"},{"title":"","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/architecture-practice/system design/cache-use-cases-may-go-wrong","content":"Thunder herd problem This happens when a large number of keys in the cache expire at the same time. Then the query requests directly hit the database, which overloads the database. There are two ways to mitigate this issue: one is to avoid setting the same expiry time for the keys, adding a random number in the configuration; the other is to allow only the core business data to hit the database and prevent non-core data to access the database until the cache is back up. Cache penetration This happens when the key doesn’t exist in the cache or the database. The application cannot retrieve relevant data from the database to update the cache. This problem creates a lot of pressure on both the cache and the database. To solve this, there are two suggestions. One is to cache a null value for non-existent keys, avoiding hitting the database. The other is to use a bloom filter to check the key existence first, and if the key doesn’t exist, we can avoid hitting the database. Cache breakdown This is similar to the thunder herd problem. It happens when a hot key expires. A large number of requests hit the database. Since the hot keys take up 80% of the queries, we do not set an expiration time for them. Cache crash This happens when the cache is down and all the requests go to the database. There are two ways to solve this problem. One is to set up a circuit breaker, and when the cache is down, the application services cannot visit the cache or the database. The other is to set up a cluster for the cache to improve cache availability.","keywords":"","version":"Next"},{"title":"","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/architecture-practice/system design/how-to-improve-API-performance","content":"","keywords":"","version":"Next"},{"title":"","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/architecture-practice/system design/system-design-cheat-sheet","content":"High Availability This means we need to ensure a high agreed level of uptime. We often describe the design target as “3 nines” or “4 nines”. “4 nines”, 99.99% uptime, means the service can only be down 8.64 seconds per day. To achieve high availability, we need to design redundancy in the system. There are several ways to do this: Hot-hot: two instances receive the same input and send the output to the downstream service. In case one side is down, the other side can immediately take over. Since both sides send output to the downstream, the downstream system needs to dedupe. Hot-warm: two instances receive the same input and only the hot side sends the output to the downstream service. In case the hot side is down, the warm side takes over and starts to send output to the downstream service. Single-leader cluster: one leader instance receives data from the upstream system and replicates to other replicas. Leaderless cluster: there is no leader in this type of cluster. Any write will get replicated to other instances. As long as the number of write instances plus the number of read instances are larger than the total number of instances, we should get valid data. High Throughput This means the service needs to handle a high number of requests given a period of time. Commonly used metrics are QPS (query per second) or TPS (transaction per second). To achieve high throughput, we often add caches to the architecture so that the request can return without hitting slower I/O devices like databases or disks. We can also increase the number of threads for computation-intensive tasks. However, adding too many threads can deteriorate the performance. We then need to identify the bottlenecks in the system and increase its throughput. Using asynchronous processing can often effectively isolate heavy-lifting components. High Scalability This means a system can quickly and easily extend to accommodate more volume (horizontal scalability) or more functionalities (vertical scalability). Normally we watch the response time to decide if we need to scale the system.","keywords":"","version":"Next"},{"title":"","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/deployment-and-infrastructure/how-docker-works","content":"Docker Client: This is the interface through which users interact. It communicates with the Docker daemon.Docker Host: Here, the Docker daemon listens for Docker API requests and manages various Docker objects, including images, containers, networks, and volumes.Docker Registry: This is where Docker images are stored. Docker Hub, for instance, is a widely-used public registry.","keywords":"","version":"Next"},{"title":"Monitoring cheat sheet","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/deployment-and-infrastructure/monitoring-cheat-sheet","content":"Monitoring cheat sheet Data Collection: Gather information from diverse sources to enhance decision-making.Data Storage: Safely store and manage data for future analysis and reference.Data Analysis: Extract valuable insights from data to drive informed actions.Alerting: Receive real-time notifications about critical events or anomalies.Visualization: Present data in a visually comprehensible format for better understanding.Reporting and Compliance: Generate reports and ensure adherence to regulatory standards.Automation: Streamline processes and tasks through automated workflows.Integration: Seamlessly connect and exchange data between different systems or tools.Feedback Loops: Continuously refine strategies based on feedback and performance analysis.","keywords":"","version":"Next"},{"title":"CI CD Simplified","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/sdlc/ci-cd-simplified","content":"CI CD Simplified Continuous Integration (CI) is a practice where code changes are frequently combined into a shared repository. This process includes automatic checks to ensure the new code works well with the existing code. Continuous Deployment (CD) takes care of automatically putting these code changes into real-world use. It makes sure that the process of moving new code to production is smooth and reliable.","keywords":"","version":"Next"},{"title":"git-basic-diagram","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/tech/git/git-basic-diagram","content":"git-basic-diagram","keywords":"","version":"Next"},{"title":"From Bare Metal to Docker","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/deployment-and-infrastructure/from-bare-metal-to-docker","content":"From Bare Metal to Docker","keywords":"","version":"Next"},{"title":"linux-file-system-structure","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/tech/linux-file-system-structure","content":"linux-file-system-structure","keywords":"","version":"Next"},{"title":"key-http-methods","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/tech/key-http-methods","content":"key-http-methods","keywords":"","version":"Next"},{"title":"top-5-kafka-use-cases","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/tech/top-5-kafka-use-cases","content":"top-5-kafka-use-cases","keywords":"","version":"Next"},{"title":"pictures","type":0,"sectionRef":"#","url":"/docs/personal-kb/fun/pictures","content":"pictures","keywords":"","version":"Next"},{"title":"Congratulations!","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-basics/congratulations","content":"","keywords":"","version":"Next"},{"title":"What's next?​","type":1,"pageTitle":"Congratulations!","url":"/docs/tutorial/tutorial-basics/congratulations#whats-next","content":" Read the official documentationModify your site configuration with docusaurus.config.jsAdd navbar and footer items with themeConfigAdd a custom Design and LayoutAdd a search barFind inspirations in the Docusaurus showcaseGet involved in the Docusaurus Community ","version":"Next","tagName":"h2"},{"title":"Create a Blog Post","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-basics/create-a-blog-post","content":"","keywords":"","version":"Next"},{"title":"Create your first Post​","type":1,"pageTitle":"Create a Blog Post","url":"/docs/tutorial/tutorial-basics/create-a-blog-post#create-your-first-post","content":" Create a file at blog/2021-02-28-greetings.md:  blog/2021-02-28-greetings.md --- slug: greetings title: Greetings! authors: - name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png - name: Sébastien Lorber title: Docusaurus maintainer url: https://sebastienlorber.com image_url: https://github.com/slorber.png tags: [greetings] --- Congratulations, you have made your first post! Feel free to play around and edit this post as much you like.   A new blog post is now available at http://localhost:3000/blog/greetings. ","version":"Next","tagName":"h2"},{"title":"popular-network-protocols","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/tech/popular-network-protocols","content":"popular-network-protocols HTTP (HyperText Transfer Protocol) HTTP is a protocol for fetching resources such as HTML documents. It is the foundation of any data exchange on the Web and it is a client-server protocol. HTTP/3 HTTP/3 is the next major revision of the HTTP. It runs on QUIC, a new transport protocol designed for mobile-heavy internet usage. It relies on UDP instead of TCP, which enables faster web page responsiveness. VR applications demand more bandwidth to render intricate details of a virtual scene and will likely benefit from migrating to HTTP/3 powered by QUIC. HTTPS (HyperText Transfer Protocol Secure) HTTPS extends HTTP and uses encryption for secure communications. WebSocket WebSocket is a protocol that provides full-duplex communications over TCP. Clients establish WebSockets to receive real-time updates from the back-end services. Unlike REST, which always “pulls” data, WebSocket enables data to be “pushed”. Applications, like online gaming, stock trading, and messaging apps leverage WebSocket for real-time communication. TCP (Transmission Control Protocol) TCP is is designed to send packets across the internet and ensure the successful delivery of data and messages over networks. Many application-layer protocols build on top of TCP. UDP (User Datagram Protocol) UDP sends packets directly to a target computer, without establishing a connection first. UDP is commonly used in time-sensitive communications where occasionally dropping packets is better than waiting. Voice and video traffic are often sent using this protocol. SMTP (Simple Mail Transfer Protocol) SMTP is a standard protocol to transfer electronic mail from one user to another. FTP (File Transfer Protocol) FTP is used to transfer computer files between client and server. It has separate connections for the control channel and data channel.","keywords":"","version":"Next"},{"title":"tbd","type":0,"sectionRef":"#","url":"/docs/personal-kb/quotes/tbd","content":"tbd","keywords":"","version":"Next"},{"title":"","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/unstructured/symmetric-asymentric-encryption","content":"","keywords":"","version":"Next"},{"title":"Tutorial Intro","type":0,"sectionRef":"#","url":"/docs/tutorial/intro","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/tutorial/intro#getting-started","content":" Get started by creating a new site.  Or try Docusaurus immediately with docusaurus.new.  ","version":"Next","tagName":"h2"},{"title":"What you'll need​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/tutorial/intro#what-youll-need","content":" Node.js version 18.0 or above: When installing Node.js, you are recommended to check all checkboxes related to dependencies.  ","version":"Next","tagName":"h3"},{"title":"Generate a new site​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/tutorial/intro#generate-a-new-site","content":" Generate a new Docusaurus site using the classic template.  The classic template will automatically be added to your project after you run the command:  npm init docusaurus@latest my-website classic   You can type this command into Command Prompt, Powershell, Terminal, or any other integrated terminal of your code editor.  The command also installs all necessary dependencies you need to run Docusaurus.  ","version":"Next","tagName":"h2"},{"title":"Start your site​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/tutorial/intro#start-your-site","content":" Run the development server:  cd my-website npm run start   The cd command changes the directory you're working with. In order to work with your newly created Docusaurus site, you'll need to navigate the terminal there.  The npm run start command builds your website locally and serves it through a development server, ready for you to view at http://localhost:3000/.  Open docs/intro.md (this page) and edit some lines: the site reloads automatically and displays your changes. ","version":"Next","tagName":"h2"},{"title":"Deploy your site","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-basics/deploy-your-site","content":"","keywords":"","version":"Next"},{"title":"Build your site​","type":1,"pageTitle":"Deploy your site","url":"/docs/tutorial/tutorial-basics/deploy-your-site#build-your-site","content":" Build your site for production:  npm run build   The static files are generated in the build folder.  ","version":"Next","tagName":"h2"},{"title":"Deploy your site​","type":1,"pageTitle":"Deploy your site","url":"/docs/tutorial/tutorial-basics/deploy-your-site#deploy-your-site-1","content":" Test your production build locally:  npm run serve   The build folder is now served at http://localhost:3000/.  You can now deploy the build folder almost anywhere easily, for free or very small cost (read the Deployment Guide). ","version":"Next","tagName":"h2"},{"title":"Create a Page","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-basics/create-a-page","content":"","keywords":"","version":"Next"},{"title":"Create your first React Page​","type":1,"pageTitle":"Create a Page","url":"/docs/tutorial/tutorial-basics/create-a-page#create-your-first-react-page","content":" Create a file at src/pages/my-react-page.js:  src/pages/my-react-page.js import React from 'react'; import Layout from '@theme/Layout'; export default function MyReactPage() { return ( &lt;Layout&gt; &lt;h1&gt;My React page&lt;/h1&gt; &lt;p&gt;This is a React page&lt;/p&gt; &lt;/Layout&gt; ); }   A new page is now available at http://localhost:3000/my-react-page.  ","version":"Next","tagName":"h2"},{"title":"Create your first Markdown Page​","type":1,"pageTitle":"Create a Page","url":"/docs/tutorial/tutorial-basics/create-a-page#create-your-first-markdown-page","content":" Create a file at src/pages/my-markdown-page.md:  src/pages/my-markdown-page.md # My Markdown page This is a Markdown page   A new page is now available at http://localhost:3000/my-markdown-page. ","version":"Next","tagName":"h2"},{"title":"REST API Authentication methods","type":0,"sectionRef":"#","url":"/docs/personal-kb/cheat-sheets/unstructured/rest-auth-methods","content":"REST API Authentication methods Basic Authentication: Involves sending a username and password with each request, but can be less secure without encryption. When to use: Suitable for simple applications where security and encryption aren’t the primary concern or when used over secured connections. Token Authentication: Uses generated tokens, like JSON Web Tokens (JWT), exchanged between client and server, offering enhanced security without sending login credentials with each request. When to use: Ideal for more secure and scalable systems, especially when avoiding sending login credentials with each request is a priority. OAuth Authentication: Enables third-party limited access to user resources without revealing credentials by issuing access tokens after user authentication. When to use: Ideal for scenarios requiring controlled access to user resources by third-party applications or services. API Key Authentication: Assigns unique keys to users or applications, sent in headers or parameters; while simple, it might lack the security features of token-based or OAuth methods. When to use: Convenient for straightforward access control in less sensitive environments or for granting access to certain functionalities without the need for user-specific permissions.","keywords":"","version":"Next"},{"title":"Create a Document","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-basics/create-a-document","content":"","keywords":"","version":"Next"},{"title":"Create your first Doc​","type":1,"pageTitle":"Create a Document","url":"/docs/tutorial/tutorial-basics/create-a-document#create-your-first-doc","content":" Create a Markdown file at docs/hello.md:  docs/hello.md # Hello This is my **first Docusaurus document**!   A new document is now available at http://localhost:3000/docs/hello.  ","version":"Next","tagName":"h2"},{"title":"Configure the Sidebar​","type":1,"pageTitle":"Create a Document","url":"/docs/tutorial/tutorial-basics/create-a-document#configure-the-sidebar","content":" Docusaurus automatically creates a sidebar from the docs folder.  Add metadata to customize the sidebar label and position:  docs/hello.md --- sidebar_label: 'Hi!' sidebar_position: 3 --- # Hello This is my **first Docusaurus document**!   It is also possible to create your sidebar explicitly in sidebars.js:  sidebars.js export default { tutorialSidebar: [ 'intro', 'hello', { type: 'category', label: 'Tutorial', items: ['tutorial-basics/create-a-document'], }, ], };  ","version":"Next","tagName":"h2"},{"title":"Manage Docs Versions","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-extras/manage-docs-versions","content":"","keywords":"","version":"Next"},{"title":"Create a docs version​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorial/tutorial-extras/manage-docs-versions#create-a-docs-version","content":" Release a version 1.0 of your project:  npm run docusaurus docs:version 1.0   The docs folder is copied into versioned_docs/version-1.0 and versions.json is created.  Your docs now have 2 versions:  1.0 at http://localhost:3000/docs/ for the version 1.0 docscurrent at http://localhost:3000/docs/next/ for the upcoming, unreleased docs  ","version":"Next","tagName":"h2"},{"title":"Add a Version Dropdown​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorial/tutorial-extras/manage-docs-versions#add-a-version-dropdown","content":" To navigate seamlessly across versions, add a version dropdown.  Modify the docusaurus.config.js file:  docusaurus.config.js export default { themeConfig: { navbar: { items: [ { type: 'docsVersionDropdown', }, ], }, }, };   The docs version dropdown appears in your navbar:    ","version":"Next","tagName":"h2"},{"title":"Update an existing version​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorial/tutorial-extras/manage-docs-versions#update-an-existing-version","content":" It is possible to edit versioned docs in their respective folder:  versioned_docs/version-1.0/hello.md updates http://localhost:3000/docs/hellodocs/hello.md updates http://localhost:3000/docs/next/hello ","version":"Next","tagName":"h2"},{"title":"Markdown Features","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-basics/markdown-features","content":"","keywords":"","version":"Next"},{"title":"Front Matter​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial/tutorial-basics/markdown-features#front-matter","content":" Markdown documents have metadata at the top called Front Matter:  my-doc.md --- id: my-doc-id title: My document title description: My document description slug: /my-custom-url --- ## Markdown heading Markdown text with [links](./hello.md)   ","version":"Next","tagName":"h2"},{"title":"Links​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial/tutorial-basics/markdown-features#links","content":" Regular Markdown links are supported, using url paths or relative file paths.  Let's see how to [Create a page](/create-a-page).   Let's see how to [Create a page](./create-a-page.md).   Result: Let's see how to Create a page.  ","version":"Next","tagName":"h2"},{"title":"Images​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial/tutorial-basics/markdown-features#images","content":" Regular Markdown images are supported.  You can use absolute paths to reference images in the static directory (static/img/docusaurus.png):  ![Docusaurus logo](/img/docusaurus.png)     You can reference images relative to the current file as well. This is particularly useful to colocate images close to the Markdown files using them:  ![Docusaurus logo](./img/docusaurus.png)   ","version":"Next","tagName":"h2"},{"title":"Code Blocks​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial/tutorial-basics/markdown-features#code-blocks","content":" Markdown code blocks are supported with Syntax highlighting.  src/components/HelloDocusaurus.js function HelloDocusaurus() { return ( &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt; ) }   src/components/HelloDocusaurus.js function HelloDocusaurus() { return &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt;; }   ","version":"Next","tagName":"h2"},{"title":"Admonitions​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial/tutorial-basics/markdown-features#admonitions","content":" Docusaurus has a special syntax to create admonitions and callouts:  My tip Use this awesome feature option ::: Take care This action is dangerous My tip Use this awesome feature option  Take care This action is dangerous  ","version":"Next","tagName":"h2"},{"title":"MDX and React Components​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial/tutorial-basics/markdown-features#mdx-and-react-components","content":" MDX can make your documentation more interactive and allows using any React components inside Markdown:  export const Highlight = ({children, color}) =&gt; ( &lt;span style={{ backgroundColor: color, borderRadius: '20px', color: '#fff', padding: '10px', cursor: 'pointer', }} onClick={() =&gt; { alert(`You clicked the color ${color} with label ${children}`) }}&gt; {children} &lt;/span&gt; ); This is &lt;Highlight color=&quot;#25c2a0&quot;&gt;Docusaurus green&lt;/Highlight&gt; ! This is &lt;Highlight color=&quot;#1877F2&quot;&gt;Facebook blue&lt;/Highlight&gt; !     This is Docusaurus green !  This is Facebook blue ! ","version":"Next","tagName":"h2"},{"title":"Translate your site","type":0,"sectionRef":"#","url":"/docs/tutorial/tutorial-extras/translate-your-site","content":"","keywords":"","version":"Next"},{"title":"Configure i18n​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial/tutorial-extras/translate-your-site#configure-i18n","content":" Modify docusaurus.config.js to add support for the fr locale:  docusaurus.config.js export default { i18n: { defaultLocale: 'en', locales: ['en', 'fr'], }, };   ","version":"Next","tagName":"h2"},{"title":"Translate a doc​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial/tutorial-extras/translate-your-site#translate-a-doc","content":" Copy the docs/intro.md file to the i18n/fr folder:  mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/ cp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md   Translate i18n/fr/docusaurus-plugin-content-docs/current/intro.md in French.  ","version":"Next","tagName":"h2"},{"title":"Start your localized site​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial/tutorial-extras/translate-your-site#start-your-localized-site","content":" Start your site on the French locale:  npm run start -- --locale fr   Your localized site is accessible at http://localhost:3000/fr/ and the Getting Started page is translated.  caution In development, you can only use one locale at a time.  ","version":"Next","tagName":"h2"},{"title":"Add a Locale Dropdown​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial/tutorial-extras/translate-your-site#add-a-locale-dropdown","content":" To navigate seamlessly across languages, add a locale dropdown.  Modify the docusaurus.config.js file:  docusaurus.config.js export default { themeConfig: { navbar: { items: [ { type: 'localeDropdown', }, ], }, }, };   The locale dropdown now appears in your navbar:    ","version":"Next","tagName":"h2"},{"title":"Build your localized site​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial/tutorial-extras/translate-your-site#build-your-localized-site","content":" Build your site for a specific locale:  npm run build -- --locale fr   Or build your site to include all the locales at once:  npm run build  ","version":"Next","tagName":"h2"}],"options":{"indexBaseUrl":true,"languages":["en"],"id":"default"}}